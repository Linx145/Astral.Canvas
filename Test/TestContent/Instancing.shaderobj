{
 "vertex":
 {
  "uniforms": [
   {
    "name": "Matrices",
    "stride": 192,
    "set": 0,
    "binding": 0
   }
  ],
  "spirv": [119734787, 66304, 851979, 60, 0, 131089, 1, 393227, 1, 1280527431, 1685353262, 808793134, 0, 196622, 0, 1, 786447, 0, 4, 1852399981, 0, 12, 25, 38, 50, 52, 56, 58, 196611, 2, 450, 655364, 1197427783, 1279741775, 1885560645, 1953718128, 1600482425, 1701734764, 1919509599, 1769235301, 25974, 524292, 1197427783, 1279741775, 1852399429, 1685417059, 1768185701, 1952671090, 6649449, 262149, 4, 1852399981, 0, 393221, 9, 1819438967, 1936674916, 1869182057, 110, 393221, 12, 1953721961, 1701015137, 1635017028, 0, 327685, 14, 1920229709, 1936024425, 0, 327686, 14, 0, 1819438967, 100, 327686, 14, 1, 2003134838, 0, 327686, 14, 2, 1785688688, 0, 327685, 16, 1920229741, 1936024425, 0, 327685, 25, 1769172848, 1852795252, 0, 393221, 36, 1348430951, 1700164197, 2019914866, 0, 393222, 36, 0, 1348430951, 1953067887, 7237481, 458758, 36, 1, 1348430951, 1953393007, 1702521171, 0, 458758, 36, 2, 1130327143, 1148217708, 1635021673, 6644590, 458758, 36, 3, 1130327143, 1147956341, 1635021673, 6644590, 196613, 38, 0, 327685, 50, 1734439526, 1869377347, 114, 262149, 52, 1869377379, 114, 393221, 56, 1734439526, 1131963732, 1685221231, 0, 196613, 58, 22101, 262215, 12, 30, 3, 262216, 14, 0, 5, 327752, 14, 0, 35, 0, 327752, 14, 0, 7, 16, 262216, 14, 1, 5, 327752, 14, 1, 35, 64, 327752, 14, 1, 7, 16, 262216, 14, 2, 5, 327752, 14, 2, 35, 128, 327752, 14, 2, 7, 16, 196679, 14, 2, 262215, 16, 34, 0, 262215, 16, 33, 0, 262215, 25, 30, 0, 327752, 36, 0, 11, 0, 327752, 36, 1, 11, 1, 327752, 36, 2, 11, 3, 327752, 36, 3, 11, 4, 196679, 36, 2, 262215, 50, 30, 0, 262215, 52, 30, 1, 262215, 56, 30, 1, 262215, 58, 30, 2, 131091, 2, 196641, 3, 2, 196630, 6, 32, 262167, 7, 6, 4, 262176, 8, 7, 7, 262168, 10, 7, 4, 262176, 11, 1, 10, 262203, 11, 12, 1, 327710, 14, 10, 10, 10, 262176, 15, 2, 14, 262203, 15, 16, 2, 262165, 17, 32, 1, 262187, 17, 18, 0, 262176, 19, 2, 10, 262167, 23, 6, 3, 262176, 24, 1, 23, 262203, 24, 25, 1, 262187, 6, 27, 1065353216, 262165, 33, 32, 0, 262187, 33, 34, 1, 262172, 35, 6, 34, 393246, 36, 7, 6, 35, 35, 262176, 37, 3, 36, 262203, 37, 38, 3, 262187, 17, 39, 2, 262187, 17, 42, 1, 262176, 48, 3, 7, 262203, 48, 50, 3, 262176, 51, 1, 7, 262203, 51, 52, 1, 262167, 54, 6, 2, 262176, 55, 3, 54, 262203, 55, 56, 3, 262176, 57, 1, 54, 262203, 57, 58, 1, 327734, 2, 4, 0, 3, 131320, 5, 262203, 8, 9, 7, 262205, 10, 13, 12, 327745, 19, 20, 16, 18, 262205, 10, 21, 20, 327826, 10, 22, 13, 21, 262205, 23, 26, 25, 327761, 6, 28, 26, 0, 327761, 6, 29, 26, 1, 327761, 6, 30, 26, 2, 458832, 7, 31, 28, 29, 30, 27, 327825, 7, 32, 22, 31, 196670, 9, 32, 327745, 19, 40, 16, 39, 262205, 10, 41, 40, 327745, 19, 43, 16, 42, 262205, 10, 44, 43, 327826, 10, 45, 41, 44, 262205, 7, 46, 9, 327825, 7, 47, 45, 46, 327745, 48, 49, 38, 18, 196670, 49, 47, 262205, 7, 53, 52, 196670, 50, 53, 262205, 54, 59, 58, 196670, 56, 59, 65789, 65592],
  "msl": "#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct Matrices
{
    float4x4 world;
    float4x4 view;
    float4x4 proj;
};

struct main0_out
{
    float4 fragColor [[user(locn0)]];
    float2 fragTexCoord [[user(locn1)]];
    float4 gl_Position [[position]];
};

struct main0_in
{
    float3 position [[attribute(0)]];
    float4 color [[attribute(1)]];
    float2 UV [[attribute(2)]];
    float4 instanceData_0 [[attribute(3)]];
    float4 instanceData_1 [[attribute(4)]];
    float4 instanceData_2 [[attribute(5)]];
    float4 instanceData_3 [[attribute(6)]];
};

vertex main0_out main0(main0_in in [[stage_in]], constant Matrices& matrices [[buffer(1)]])
{
    main0_out out = {};
    float4x4 instanceData = {};
    instanceData[0] = in.instanceData_0;
    instanceData[1] = in.instanceData_1;
    instanceData[2] = in.instanceData_2;
    instanceData[3] = in.instanceData_3;
    float4 worldPosition = (instanceData * matrices.world) * float4(in.position, 1.0);
    out.gl_Position = (matrices.proj * matrices.view) * worldPosition;
    out.fragColor = in.color;
    out.fragTexCoord = in.UV;
    return out;
}

"
 },
 "fragment":
 {
  "images": [
   {
    "name": "inputTexture",
    "arrayLength": 0,
    "set": 0,
    "binding": 2
   }
  ],
  "samplers": [
   {
    "name": "samplerState",
    "arrayLength": 0,
    "set": 0,
    "binding": 1
   }
  ],
  "spirv": [119734787, 66304, 851979, 43, 0, 131089, 1, 393227, 1, 1280527431, 1685353262, 808793134, 0, 196622, 0, 1, 524303, 4, 4, 1852399981, 0, 22, 26, 41, 196624, 4, 7, 196611, 2, 450, 655364, 1197427783, 1279741775, 1885560645, 1953718128, 1600482425, 1701734764, 1919509599, 1769235301, 25974, 524292, 1197427783, 1279741775, 1852399429, 1685417059, 1768185701, 1952671090, 6649449, 262149, 4, 1852399981, 0, 196613, 9, 7106403, 393221, 12, 1970302569, 2019906676, 1701999988, 0, 393221, 16, 1886216563, 1400005996, 1702125940, 0, 393221, 22, 1734439526, 1131963732, 1685221231, 0, 327685, 26, 1734439526, 1869377347, 114, 327685, 41, 1131705711, 1919904879, 0, 262215, 12, 34, 0, 262215, 12, 33, 2, 262215, 16, 34, 0, 262215, 16, 33, 1, 262215, 22, 30, 1, 262215, 26, 30, 0, 262215, 41, 30, 0, 131091, 2, 196641, 3, 2, 196630, 6, 32, 262167, 7, 6, 4, 262176, 8, 7, 7, 589849, 10, 6, 1, 0, 0, 0, 1, 0, 262176, 11, 0, 10, 262203, 11, 12, 0, 131098, 14, 262176, 15, 0, 14, 262203, 15, 16, 0, 196635, 18, 10, 262167, 20, 6, 2, 262176, 21, 1, 20, 262203, 21, 22, 1, 262176, 25, 1, 7, 262203, 25, 26, 1, 262165, 29, 32, 0, 262187, 29, 30, 3, 262176, 31, 7, 6, 262187, 6, 34, 1008981770, 131092, 35, 262176, 40, 3, 7, 262203, 40, 41, 3, 327734, 2, 4, 0, 3, 131320, 5, 262203, 8, 9, 7, 262205, 10, 13, 12, 262205, 14, 17, 16, 327766, 18, 19, 13, 17, 262205, 20, 23, 22, 327767, 7, 24, 19, 23, 262205, 7, 27, 26, 327813, 7, 28, 24, 27, 196670, 9, 28, 327745, 31, 32, 9, 30, 262205, 6, 33, 32, 327864, 35, 36, 33, 34, 196855, 38, 0, 262394, 36, 37, 38, 131320, 37, 65788, 131320, 38, 262205, 7, 42, 9, 196670, 41, 42, 65789, 65592],
  "msl": "#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct main0_out
{
    float4 outColor [[color(0)]];
};

struct main0_in
{
    float4 fragColor [[user(locn0)]];
    float2 fragTexCoord [[user(locn1)]];
};

fragment main0_out main0(main0_in in [[stage_in]], texture2d<float> inputTexture [[texture(0)]], sampler samplerState [[sampler(0)]])
{
    main0_out out = {};
    float4 col = inputTexture.sample(samplerState, in.fragTexCoord) * in.fragColor;
    if (col.w < 0.00999999977648258209228515625)
    {
        discard_fragment();
    }
    out.outColor = col;
    return out;
}

"
 }
}